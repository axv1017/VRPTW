package vrptw;

import java.util.ArrayList;

import edu.sru.thangiah.zeus.core.ZeusProblemInfo;

public class VRPTWUnviableList {
	private ArrayList<VRPTWUnviable> badRoutes = new ArrayList<VRPTWUnviable>();
	private double maxDistance;
	private double depotX; 
	private double depotY;
	static int bad = 0;
	static int tried = 0;
	public VRPTWUnviableList(ArrayList<VRPTWShipment> shipList, ArrayList<VRPTWTruckType> ttList, VRPTWDepot depot)
	{
		//VRPTWTruck truck = (VRPTWTruck)ZeusProblemInfo.getTruckTypes();
		//VRPTW
		depotX = depot.getXCoord();
		depotY = depot.getYCoord();
		VRPTWTruckType truck = ttList.get(0);
		maxDistance = truck.getMaxDistance();
		findInfeasibleRoutes(shipList);	
	}
	
	public int length() { return badRoutes.size(); }
	private void findInfeasibleRoutes(ArrayList<VRPTWShipment> shipList)
	{
		ArrayList<VRPTWShipment> a = shipList;
		for(VRPTWShipment testShip : shipList)
		{
			//System.out.println("running");
			for(VRPTWShipment ship: a)
			{
				if(isFeasible(testShip, ship) == false)
				{
					VRPTWUnviable badRoute = new VRPTWUnviable(testShip.getIndex(), ship.getIndex());
					badRoutes.add(badRoute);
				}
			}
		}
		System.out.println(bad);
		System.out.println(tried);
	}
	
	private boolean isFeasible(VRPTWShipment a, VRPTWShipment b)
	{	
		boolean feasible = true;
		double routeDistance = 0; 
		tried += 1;
		System.out.println(maxDistance + "\n");
		routeDistance += calculateDistance(a.getXCoord(), b.getXCoord(), a.getYCoord(), b.getYCoord());
		System.out.println(routeDistance + "\n");

		routeDistance += calculateDistance(b.getXCoord(), depotX, b.getYCoord(), depotY);
		System.out.println(maxDistance + "\n");

		if(routeDistance > maxDistance)
		{
		feasible = false;
		bad += 1;
		}
		
		//if(a.getEarliestTime() > b.getLatestTime())
		//{
		//	System.out.println("bad");
		///	feasible = false;
		//	bad += 1;
		//}
		//if(a)

		return feasible;
	}
	
	private double calculateDistance(double x1, double x2, double y1, double y2)
	{
		return Math.sqrt(Math.pow((x1-x2),2) + Math.pow((y1-y2), 2));
	}
	public String toString()
	{
		String ret = ""; 
		for(VRPTWUnviable a: badRoutes)
		{
			ret += a.toString() + "\n";
		}
		return ret;
	}
	public void print()
	{
		System.out.print(this.toString());
	}
}
