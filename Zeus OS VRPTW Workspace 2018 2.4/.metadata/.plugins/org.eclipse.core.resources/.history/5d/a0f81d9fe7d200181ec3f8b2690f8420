package vrptw;

import java.util.ArrayList;

public class VRPTWUnviableList {
	private ArrayList<VRPTWUnviable> badRoutes = new ArrayList<VRPTWUnviable>();
	private int maxDistance;
	private double depotX; 
	private double depotY;
	
	
	
	
	private void findInfeasibleRoutes(ArrayList<VRPTWShipment> shipList)
	{
		for(VRPTWShipment testShip : shipList)
		{
			for(VRPTWShipment ship: shipList)
			{
				if(!isFeasible(testShip, ship))
				{
					VRPTWUnviable badRoute = new VRPTWUnviable(testShip, ship);
					badRoutes.add(null)
				}
			}
		}
	}
	
	private boolean isFeasible(VRPTWShipment a, VRPTWShipment b)
	{	
		double routeDistance = 0; 
		routeDistance += calculateDistance(a.getXCoord(), b.getXCoord(), a.getYCoord(), b.getYCoord());
		routeDistance += calculateDistance(b.getXCoord(), depotX, b.getYCoord(), depotY); 
		if(routeDistance > maxDistance)
		{
		return false;
		}
		else
		{
			return true;
		}
		
	}
	
	private double calculateDistance(double x1, double x2, double y1, double y2)
	{
		return Math.sqrt(Math.pow((x1-x2),2) + Math.pow((y1-y2), 2));
	}
}
